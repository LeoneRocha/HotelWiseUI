https://dev.to/vitorrios1001/implementando-testes-com-jest-em-projetos-react-typescript-2j2


https://medium.com/@abhishekpn98/setup-jest-in-a-typescript-react-project-cfb8188534ec

https://dev.to/hannahadora/jest-testing-with-vite-and-react-typescript-4bap

https://www.alura.com.br/artigos/testes-automatizados-react-typescript?srsltid=AfmBOop-06xUHKuf80_vGokZkNpPQApsWOC-n3DXgZJyWxSne9bGk3A8

https://dev.to/bajajcodes/mastering-jest-configuration-for-react-typescript-projects-with-vite-a-step-by-step-guide-4k4b

npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/dom @testing-library/user-event


npm install --save-dev jest jest-environment-jsdom ts-jest @types/jest


npm install --save-dev @testing-library/jest-dom


npm install --save-dev jest @testing-library/react @testing-library/jest-dom ts-jest



npm install --save-dev jest-junit


instalar o  jest-html-reporter para react typscript


npm install --save-dev vite-jest
npm install --save-dev vite-plugin-environment




npm run build:prod

npm run dev

npm run test


dentificar Dependências Conflitantes:

O problema está entre jest e vite-jest. jest@29.7.0 é encontrado, mas vite-jest@0.1.4 requer jest@"^27.0.0".

Solução 1: Forçar a instalação com --legacy-peer-deps:

Adicione a seguinte linha no seu arquivo YAML da pipeline para forçar a instalação:

yaml


// Mock do arquivo CSS para evitar problemas durante o teste
jest.mock('../css/HotelList.css', () => ({}));

  beforeEach(() => {
        jest.clearAllMocks();
        // Mock do console.warn para suprimir os avisos durante os testes
        jest.spyOn(console, 'warn').mockImplementation(() => { });
    });
 

Gere test jest para esse componente em react typescript

import { jwtDecode, JwtPayload } from 'jwt-decode';
import LocalStorageService from './localStorageService'; 

   class SecurityService {
    static isTokenValid(token: string | null): boolean {
        if (token === null) {
            token = SecurityService.getToken();
        }
        try {
            if (token !== null) {
                const decoded = jwtDecode<JwtPayload>(token);
                console.log('Decoded token:', decoded);
                const currentTime = Date.now() / 1000; 
                if (decoded.exp) {
                    console.log('Token expiration time:', this.formatTimestamp(decoded.exp));
                }
                return decoded.exp ? decoded.exp > currentTime : false;
            }
            console.log('Token is null');
            return false;

        } catch (error) {
            console.error('Error decoding token:', error);
            return false;
        }
    }

    static isTokenExpired(token: string): boolean {
        return !this.isTokenValid(token);
    }

    static getToken(): string | null {
        return LocalStorageService.getItem('token');
    }

    static setToken(token: string): void {
        LocalStorageService.setItem('token', token);
    }

    static removeToken(): void {
        LocalStorageService.removeItem('token');
    }
    static formatTimestamp(timestamp: number): string {
        const date = new Date(timestamp * 1000); // Convertendo de segundos para milissegundos
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
      }
}

export default SecurityService;
