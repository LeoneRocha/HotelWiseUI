https://dev.to/vitorrios1001/implementando-testes-com-jest-em-projetos-react-typescript-2j2


https://medium.com/@abhishekpn98/setup-jest-in-a-typescript-react-project-cfb8188534ec

https://dev.to/hannahadora/jest-testing-with-vite-and-react-typescript-4bap

https://www.alura.com.br/artigos/testes-automatizados-react-typescript?srsltid=AfmBOop-06xUHKuf80_vGokZkNpPQApsWOC-n3DXgZJyWxSne9bGk3A8

https://dev.to/bajajcodes/mastering-jest-configuration-for-react-typescript-projects-with-vite-a-step-by-step-guide-4k4b

npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/dom @testing-library/user-event


npm install --save-dev jest jest-environment-jsdom ts-jest @types/jest


npm install --save-dev @testing-library/jest-dom


npm install --save-dev jest @testing-library/react @testing-library/jest-dom ts-jest



npm install --save-dev jest-junit


instalar o  jest-html-reporter para react typscript


npm install --save-dev vite-jest
npm install --save-dev vite-plugin-environment




npm run build:prod

npm run dev

npm run test


dentificar Dependências Conflitantes:

O problema está entre jest e vite-jest. jest@29.7.0 é encontrado, mas vite-jest@0.1.4 requer jest@"^27.0.0".

Solução 1: Forçar a instalação com --legacy-peer-deps:

Adicione a seguinte linha no seu arquivo YAML da pipeline para forçar a instalação:

yaml


// Mock do arquivo CSS para evitar problemas durante o teste
jest.mock('../css/HotelList.css', () => ({}));

  beforeEach(() => {
        jest.clearAllMocks();
        // Mock do console.warn para suprimir os avisos durante os testes
        jest.spyOn(console, 'warn').mockImplementation(() => { });
    });




Gere test jest para esse componente em react typescript
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Modal from 'react-bootstrap/Modal';
import Button from 'react-bootstrap/Button';
import { FiLogOut } from 'react-icons/fi'; // Importando o ícone de logout
import '../css/Navbar.css'; // Importando o CSS customizado
import { getChatCompletion } from '../services/chatService';
import LocalStorageService from '../services/localStorageService'; // Importando LocalStorageService
import DOMPurify from 'dompurify'; // Importando dompurify

const Navbar: React.FC = () => {
  const [query, setQuery] = useState('');
  const [response, setResponse] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [showLogoutModal, setShowLogoutModal] = useState(false); // Estado para exibir modal de logout
  const navigate = useNavigate();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const res = await getChatCompletion({ maxHotelRetrieve: 0, searchTextCriteria: query });
      if (res.length > 0) {
        // Sanitizar a resposta antes de definir o estado
        const sanitizedResponse = DOMPurify.sanitize(res[0].response);
        setResponse(sanitizedResponse);
      } else {
        setResponse('Nenhuma resposta encontrada.');
      }
      setShowModal(true);
    } catch (error) {
      console.error('Erro ao consultar a API de chat completion:', error);
      setResponse('Ocorreu um erro ao consultar a API. Por favor, tente novamente.');
      setShowModal(true);
    }
  };

  const handleLogout = () => {
    LocalStorageService.removeItem('token');
    navigate('/login');
  };

  const confirmLogout = () => {
    setShowLogoutModal(true);
  };

  const handleLogoutClose = () => {
    setShowLogoutModal(false);
  };

  const handleLogoutConfirm = () => {
    handleLogout();
    setShowLogoutModal(false);
  };

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
      <div className="container-fluid">
        <Link className="navbar-brand" to="/list">Hotel Management</Link>
        <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav me-auto mb-2 mb-lg-0">
            <li className="nav-item">
              <Link className="nav-link" to="/search">Buscar Hotéis</Link>
            </li>
            <li className="nav-item dropdown">
              <Link className="nav-link dropdown-toggle" to="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                Admin
              </Link>
              <ul className="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><Link className="dropdown-item" to="/new/:new">Adicionar Hotel</Link></li>
                <li><hr className="dropdown-divider" /></li>
                <li><Link className="dropdown-item" to="/list">Listar Hotéis</Link></li>
              </ul>
            </li>
          </ul>
          <form className="d-flex assistant-search-form" onSubmit={handleSubmit}>
            <input
              className="form-control me-2 assistant-search-input"
              type="search"
              placeholder="Pergunte ao Assistente..."
              aria-label="Search"
              value={query}
              onChange={handleInputChange}
            />
            <button className="btn btn-success" type="submit">Enviar</button>
          </form>
          <button className="btn btn-link text-white ms-3" onClick={confirmLogout}>
            <FiLogOut size={24}  title='Logout'/>
          </button>
        </div>
      </div>

      <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Resposta do Assistente</Modal.Title>
        </Modal.Header>
        <Modal.Body dangerouslySetInnerHTML={{ __html: response }}></Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Fechar
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showLogoutModal} onHide={handleLogoutClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>Confirmar Logout</Modal.Title>
        </Modal.Header>
        <Modal.Body>Você deseja deslogar do sistema?</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleLogoutClose}>
            Cancelar
          </Button>
          <Button variant="primary" onClick={handleLogoutConfirm}>
            Logout
          </Button>
        </Modal.Footer>
      </Modal>
    </nav>
  );
};

export default Navbar;
