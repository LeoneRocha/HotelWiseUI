https://dev.to/vitorrios1001/implementando-testes-com-jest-em-projetos-react-typescript-2j2


https://medium.com/@abhishekpn98/setup-jest-in-a-typescript-react-project-cfb8188534ec

https://dev.to/hannahadora/jest-testing-with-vite-and-react-typescript-4bap

https://www.alura.com.br/artigos/testes-automatizados-react-typescript?srsltid=AfmBOop-06xUHKuf80_vGokZkNpPQApsWOC-n3DXgZJyWxSne9bGk3A8

https://dev.to/bajajcodes/mastering-jest-configuration-for-react-typescript-projects-with-vite-a-step-by-step-guide-4k4b

npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/dom @testing-library/user-event


npm install --save-dev jest jest-environment-jsdom ts-jest @types/jest


npm install --save-dev @testing-library/jest-dom


npm install --save-dev jest @testing-library/react @testing-library/jest-dom ts-jest



npm install --save-dev jest-junit


instalar o  jest-html-reporter para react typscript


npm install --save-dev vite-jest
npm install --save-dev vite-plugin-environment




npm run build:prod

npm run dev

npm run test


dentificar Dependências Conflitantes:

O problema está entre jest e vite-jest. jest@29.7.0 é encontrado, mas vite-jest@0.1.4 requer jest@"^27.0.0".

Solução 1: Forçar a instalação com --legacy-peer-deps:

Adicione a seguinte linha no seu arquivo YAML da pipeline para forçar a instalação:

yaml


// Mock do arquivo CSS para evitar problemas durante o teste
jest.mock('../css/HotelList.css', () => ({}));

  beforeEach(() => {
        jest.clearAllMocks();
        // Mock do console.warn para suprimir os avisos durante os testes
        jest.spyOn(console, 'warn').mockImplementation(() => { });
    });
 

Gere test jest para esse componente em react typescript
 import axios from 'axios';
import { IHotel } from '../interfaces/IHotel';
import { ServiceResponse } from '../interfaces/authTypes';
import { ISearchCriteria } from '../interfaces/ISearchCriteria';
import { IHotelSemanticResult } from '../interfaces/IHotelSemanticResult';
import { EnvironmentService } from './EnvironmentService';

// Criação da instância Axios
export const api_hotelservice = axios.create({
  baseURL: EnvironmentService.getApiBaseUrl() + '/Hotels/v1',
});

// Interceptor para adicionar o token de autenticação
api_hotelservice.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Funções do serviço
export const getAllHotels = async (): Promise<IHotel[]> => {
  const response = await api_hotelservice.get<ServiceResponse<IHotel[]>>('/');
  if (response.data.success) {
    return response.data.data;
  } else {
    throw new Error(response.data.message || 'Erro ao buscar hotéis');
  }
};

export const getHotelById = async (id: number): Promise<IHotel> => {
  const response = await api_hotelservice.get<ServiceResponse<IHotel>>(`/${id}`);
  if (response.data.success) {
    return response.data.data;
  } else {
    throw new Error(response.data.message || 'Erro ao buscar hotel');
  }
};

export const addVectorById = async (id: number): Promise<IHotel> => {
  const response = await api_hotelservice.get<ServiceResponse<IHotel>>(`/addvector/${id}`);
  if (response.data.success) {
    return response.data.data;
  } else {
    throw new Error(response.data.message || 'Erro ao adicionar vetor');
  }
};

export const createHotel = async (hotel: IHotel): Promise<void> => {
  const response = await api_hotelservice.post<ServiceResponse<void>>('/', hotel);
  if (!response.data.success) {
    throw new Error(response.data.message || 'Erro ao criar hotel');
  }
};

export const updateHotel = async (id: number, hotel: IHotel): Promise<void> => {
  const response = await api_hotelservice.put<ServiceResponse<void>>(`/${id}`, hotel);
  if (!response.data.success) {
    throw new Error(response.data.message || 'Erro ao atualizar hotel');
  }
};

export const deleteHotel = async (id: number): Promise<void> => {
  const response = await api_hotelservice.delete<ServiceResponse<void>>(`/${id}`);
  if (!response.data.success) {
    throw new Error(response.data.message || 'Erro ao deletar hotel');
  }
};

// Função de busca semântica
export const semanticSearch = async (criteria: ISearchCriteria): Promise<ServiceResponse<IHotelSemanticResult>> => {
  const response = await api_hotelservice.post<ServiceResponse<IHotelSemanticResult>>('/semanticsearch', criteria);
  console.log(response);
  if (response.data.success) {
    return response.data;
  } else {
    throw new Error(response.data.message || 'Erro na busca semântica');
  }
};

export const generateHotelByIA = async (): Promise<IHotel> => {
  const response = await api_hotelservice.get<ServiceResponse<IHotel>>('/generate');
  if (response.data.success) {
    return response.data.data;
  } else {
    throw new Error(response.data.message || 'Erro ao gerar hotel por IA');
  }
};

export const getTags = async (): Promise<string[]> => {
  const response = await api_hotelservice.get<string[]>('/tags');
  return response.data;
};
 
  export interface IHotel {
    
    hotelId: number;
    hotelName: string;
    description: string;
    tags: string[];
    stars: number;
    initialRoomPrice: number;
    zipCode: string;
    location: string;
    city: string;
    stateCode: string;
    score: number;
    isHotelInVectorStore: boolean;
  }